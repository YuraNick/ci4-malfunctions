<?php

namespace App\Controllers;

use App\Models\User;
use App\Models\MonObject;
use App\Models\Reasons;
use App\Models\Сriticality;
use App\Models\Malfunctions;
use App\Models\Notifications;
use App\Models\NotificationsUsers;
use App\Models\DispatcherStatuses;
use App\Models\DispatcherConfirms;
use App\Models\DispatcherSupportQuestions;
use App\Models\DispatcherSupportAnswers;
use App\Models\SupportDeveloperAnswers;
use App\Models\SupportDeveloperQuestions;
use CodeIgniter\Database\Exceptions\DatabaseException;

class ManageTables extends BaseController
{
  public function truncate(): string
  {
    $info = [
      '<a href="/">На главную</a><br>'
    ];

    foreach([
      'malfunction.users' => new User(),
      'malfunction.obj_mon' => new MonObject(),
      'malfunction.reasons' => new Reasons(),
      'malfunction.criticality' => new Сriticality(),
      'malfunction.malfunctions' => new Malfunctions(),
      'malfunction.notifications' => new Notifications(),
      'malfunction.notifications_users' => new NotificationsUsers(),
      'malfunction.dispatcher_statuses' => new DispatcherStatuses(),
      'malfunction.dispatcher_confirms' => new DispatcherConfirms(),
      'malfunction.dispatcher_support_questions' => new DispatcherSupportQuestions(),
      'malfunction.dispatcher_support_answers' => new DispatcherSupportAnswers(),
      'malfunction.support_developer_questions' => new SupportDeveloperQuestions(),
      'malfunction.support_developer_answers' => new SupportDeveloperAnswers(),
    ] as $name => $Model) {
      $model = new $Model();
      $sql = "TRUNCATE $name CASCADE";
      $res = $model->query($sql);
      $info[] = $res ? "Тааблица $name очищена" : "Ошибка очистки таблицы $name";
    }
    
    return implode('<br>', $info);
  }

  public function create() {
    $info = [
      '<a href="/">На главную</a><br>'
    ];

    $model = new User();

    $sql = "DROP SCHEMA IF EXISTS malfunction CASCADE;";
    $res = $model->query($sql);
    $info[] = !$res ? 'Ошибка удаления схемы malfunction' : 'Схема malfunction еще не существует или была успешно удалена';

    $sql = "CREATE SCHEMA IF NOT EXISTS malfunction AUTHORIZATION postgres;";
    $res = $model->query($sql);
    $info[] = !$res ? 'Ошибка создания схемы malfunction' : 'Схема malfunction уже существует или была успешно создана';
    
    $sql = $this->getRecreateTablesSql();
    try {
      $res = $model->query($sql);
    } catch (DatabaseException $err) {
      $info[] = 'Ошибка создания таблиц: ' . $err->getMessage();
      $res = null;
    }
    if ($res !== null) {
      $info[] = $res ? 'Таблицы успешно созданы' : 'Ошибка создания таблиц';
    }
    
    return implode('<br>', $info); 
  }

  private function getRecreateTablesSql(): string {
    return <<< RECREATESQL
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS malfunction.criticality
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    is_notification boolean NOT NULL,
    CONSTRAINT criticality_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.criticality
    IS 'Критичность события';

CREATE TABLE IF NOT EXISTS malfunction.dispatcher_confirms
(
    id bigserial NOT NULL,
    id_malfunction bigint NOT NULL,
    id_user integer NOT NULL,
    id_status integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    comment text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT dispatcher_confirms_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.dispatcher_confirms
    IS 'Подтверждение диспетчером';

CREATE TABLE IF NOT EXISTS malfunction.dispatcher_statuses
(
    id serial NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT dispatcher_statuses_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.dispatcher_statuses
    IS 'Статусы, проставляемые по поле статус таблицы подтверждение диспетчером';

CREATE TABLE IF NOT EXISTS malfunction.dispatcher_support_answers
(
    id bigserial NOT NULL,
    id_user integer NOT NULL,
    id_question bigint NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    lifetime timestamp with time zone NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT dispatcher_support_answers_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.dispatcher_support_answers
    IS 'Ответ техподдержки диспетчеру';

CREATE TABLE IF NOT EXISTS malfunction.dispatcher_support_questions
(
    id bigserial NOT NULL,
    id_user integer NOT NULL,
    id_malfunction bigserial NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    importance smallint NOT NULL DEFAULT 1,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT dispatcher_support_questions_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.dispatcher_support_questions
    IS 'Вопрос диспетчера в техподдержку';

CREATE TABLE IF NOT EXISTS malfunction.malfunctions
(
    id bigserial NOT NULL,
    id_obj integer NOT NULL,
    id_reason integer NOT NULL,
    id_criticality integer NOT NULL,
    begin timestamp with time zone NOT NULL,
    "end" timestamp with time zone NOT NULL,
    reliability smallint NOT NULL,
    percent smallint NOT NULL,
    CONSTRAINT malfunctions_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.malfunctions
    IS 'Таблица зафискированных неисправностей';

CREATE TABLE IF NOT EXISTS malfunction.notifications_users
(
    id bigserial NOT NULL,
    notifications_id bigserial NOT NULL,
    id_user integer NOT NULL,
    is_sended boolean NOT NULL DEFAULT false,
    PRIMARY KEY (id),
    CONSTRAINT "Уведомление пользователя" UNIQUE (notifications_id, id_user)
);

CREATE TABLE IF NOT EXISTS malfunction.notifications
(
    id bigserial NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    id_malfunction bigint NOT NULL,
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.notifications
    IS 'Уведомления';

CREATE TABLE IF NOT EXISTS malfunction.obj_mon
(
    id serial NOT NULL,
    state_number text COLLATE pg_catalog."default" NOT NULL,
    model text COLLATE pg_catalog."default",
    CONSTRAINT obj_mon_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.obj_mon
    IS 'Объект мониторинга (автомобиль)';

CREATE TABLE IF NOT EXISTS malfunction.reasons
(
    id bigserial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    is_mileage boolean DEFAULT false,
    is_fuel_level boolean DEFAULT false,
    is_moto boolean DEFAULT false,
    is_can boolean DEFAULT false,
    CONSTRAINT reasons_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.reasons
    IS 'Причина неисправности';

CREATE TABLE IF NOT EXISTS malfunction.support_developer_answers
(
    id bigserial NOT NULL,
    id_user integer NOT NULL,
    id_question bigint NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT support_developer_answers_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.support_developer_answers
    IS 'Ответ разработчика техподдержке';

CREATE TABLE IF NOT EXISTS malfunction.support_developer_questions
(
    id bigserial NOT NULL,
    id_malfunction bigint NOT NULL,
    id_user integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    importance smallint NOT NULL DEFAULT 1,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT support_developer_questions_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.support_developer_questions
    IS 'Вопросы техподдержки разработчикам';

CREATE TABLE IF NOT EXISTS malfunction.users
(
    id serial NOT NULL,
    login text NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    role text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT login UNIQUE (login)
);

COMMENT ON TABLE malfunction.users
    IS 'Пользователи';

ALTER TABLE IF EXISTS malfunction.dispatcher_confirms
    ADD CONSTRAINT "Неисправность" FOREIGN KEY (id_malfunction)
    REFERENCES malfunction.malfunctions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_confirms
    ADD CONSTRAINT "Пользователь (диспетчер)" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_confirms
    ADD CONSTRAINT "Статус неисправности" FOREIGN KEY (id_status)
    REFERENCES malfunction.dispatcher_statuses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_support_answers
    ADD CONSTRAINT "Вопрос диспетчера" FOREIGN KEY (id_question)
    REFERENCES malfunction.dispatcher_support_questions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_support_answers
    ADD CONSTRAINT "Пользователь" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_support_questions
    ADD CONSTRAINT "Неисправность" FOREIGN KEY (id_malfunction)
    REFERENCES malfunction.malfunctions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_support_questions
    ADD CONSTRAINT "Пользователь (диспетчер)" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.malfunctions
    ADD CONSTRAINT "Критичность" FOREIGN KEY (id_criticality)
    REFERENCES malfunction.criticality (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.malfunctions
    ADD CONSTRAINT "Объект мониторинга (автомобиль)" FOREIGN KEY (id_obj)
    REFERENCES malfunction.obj_mon (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.malfunctions
    ADD CONSTRAINT "Причина неисправности" FOREIGN KEY (id_reason)
    REFERENCES malfunction.reasons (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.notifications_users
    ADD CONSTRAINT malfunctions_notifications_id_user_fkey FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.notifications_users
    ADD CONSTRAINT malfunctions_notifications_notifications_id_fkey FOREIGN KEY (notifications_id)
    REFERENCES malfunction.notifications (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.notifications
    ADD CONSTRAINT "Неисправность" FOREIGN KEY (id_malfunction)
    REFERENCES malfunction.malfunctions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.support_developer_answers
    ADD CONSTRAINT "Вопрос техподдержки" FOREIGN KEY (id_question)
    REFERENCES malfunction.support_developer_questions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.support_developer_answers
    ADD CONSTRAINT "Пользователь" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.support_developer_questions
    ADD CONSTRAINT "Неисправность" FOREIGN KEY (id_malfunction)
    REFERENCES malfunction.malfunctions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.support_developer_questions
    ADD CONSTRAINT "Пользователь (специалист техподде" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;
RECREATESQL;
  }

  private function getCreateTablesSql() {
    return <<< CREATESQL
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS malfunction.criticality
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    is_notification boolean NOT NULL,
    CONSTRAINT criticality_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.criticality
    IS 'Критичность события';

CREATE TABLE IF NOT EXISTS malfunction.dispatcher_confirms
(
    id bigserial NOT NULL,
    id_malfunction bigint NOT NULL,
    id_user integer NOT NULL,
    id_status integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    comment text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT dispatcher_confirms_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.dispatcher_confirms
    IS 'Подтверждение диспетчером';

CREATE TABLE IF NOT EXISTS malfunction.dispatcher_statuses
(
    id serial NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT dispatcher_statuses_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.dispatcher_statuses
    IS 'Статусы, проставляемые по поле статус таблицы подтверждение диспетчером';

CREATE TABLE IF NOT EXISTS malfunction.dispatcher_support_answers
(
    id bigserial NOT NULL,
    id_user integer NOT NULL,
    id_question bigint NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    lifetime timestamp with time zone NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT dispatcher_support_answers_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.dispatcher_support_answers
    IS 'Ответ техподдержки диспетчеру';

CREATE TABLE IF NOT EXISTS malfunction.dispatcher_support_questions
(
    id bigserial NOT NULL,
    id_user integer NOT NULL,
    id_malfunction bigserial NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    importance smallint NOT NULL DEFAULT 1,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT dispatcher_support_questions_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.dispatcher_support_questions
    IS 'Вопрос диспетчера в техподдержку';

CREATE TABLE IF NOT EXISTS malfunction.malfunctions
(
    id bigserial NOT NULL,
    id_obj integer NOT NULL,
    id_reason integer NOT NULL,
    id_criticality integer NOT NULL,
    begin timestamp with time zone NOT NULL,
    "end" timestamp with time zone NOT NULL,
    reliability smallint NOT NULL,
    percent smallint NOT NULL,
    CONSTRAINT malfunctions_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.malfunctions
    IS 'Таблица зафискированных неисправностей';

CREATE TABLE IF NOT EXISTS malfunction.notifications_users
(
    id bigserial NOT NULL,
    notifications_id bigserial NOT NULL,
    id_user integer NOT NULL,
    is_sended boolean NOT NULL DEFAULT false,
    PRIMARY KEY (id),
    CONSTRAINT "Уведомление пользователя" UNIQUE (notifications_id, id_user)
);

CREATE TABLE IF NOT EXISTS malfunction.notifications
(
    id bigserial NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    id_malfunction bigint NOT NULL,
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.notifications
    IS 'Уведомления';

CREATE TABLE IF NOT EXISTS malfunction.obj_mon
(
    id serial NOT NULL,
    state_number text COLLATE pg_catalog."default" NOT NULL,
    model text COLLATE pg_catalog."default",
    CONSTRAINT obj_mon_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.obj_mon
    IS 'Объект мониторинга (автомобиль)';

CREATE TABLE IF NOT EXISTS malfunction.reasons
(
    id bigserial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    is_mileage boolean DEFAULT false,
    is_fuel_level boolean DEFAULT false,
    is_moto boolean DEFAULT false,
    is_can boolean DEFAULT false,
    CONSTRAINT reasons_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.reasons
    IS 'Причина неисправности';

CREATE TABLE IF NOT EXISTS malfunction.support_developer_answers
(
    id bigserial NOT NULL,
    id_user integer NOT NULL,
    id_question bigint NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT support_developer_answers_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.support_developer_answers
    IS 'Ответ разработчика техподдержке';

CREATE TABLE IF NOT EXISTS malfunction.support_developer_questions
(
    id bigserial NOT NULL,
    id_malfunction bigint NOT NULL,
    id_user integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    importance smallint NOT NULL DEFAULT 1,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT support_developer_questions_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE malfunction.support_developer_questions
    IS 'Вопросы техподдержки разработчикам';

CREATE TABLE IF NOT EXISTS malfunction.users
(
    id serial NOT NULL,
    login text NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    role text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT login UNIQUE (login)
);

COMMENT ON TABLE malfunction.users
    IS 'Пользователи';

ALTER TABLE IF EXISTS malfunction.dispatcher_confirms
    ADD CONSTRAINT "Неисправность" FOREIGN KEY (id_malfunction)
    REFERENCES malfunction.malfunctions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_confirms
    ADD CONSTRAINT "Пользователь (диспетчер)" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_confirms
    ADD CONSTRAINT "Статус неисправности" FOREIGN KEY (id_status)
    REFERENCES malfunction.dispatcher_statuses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_support_answers
    ADD CONSTRAINT "Вопрос диспетчера" FOREIGN KEY (id_question)
    REFERENCES malfunction.dispatcher_support_questions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_support_answers
    ADD CONSTRAINT "Пользователь" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_support_questions
    ADD CONSTRAINT "Неисправность" FOREIGN KEY (id_malfunction)
    REFERENCES malfunction.malfunctions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.dispatcher_support_questions
    ADD CONSTRAINT "Пользователь (диспетчер)" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.malfunctions
    ADD CONSTRAINT "Критичность" FOREIGN KEY (id_criticality)
    REFERENCES malfunction.criticality (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.malfunctions
    ADD CONSTRAINT "Объект мониторинга (автомобиль)" FOREIGN KEY (id_obj)
    REFERENCES malfunction.obj_mon (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.malfunctions
    ADD CONSTRAINT "Причина неисправности" FOREIGN KEY (id_reason)
    REFERENCES malfunction.reasons (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.notifications_users
    ADD CONSTRAINT malfunctions_notifications_id_user_fkey FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.notifications_users
    ADD CONSTRAINT malfunctions_notifications_notifications_id_fkey FOREIGN KEY (notifications_id)
    REFERENCES malfunction.notifications (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.notifications
    ADD CONSTRAINT "Неисправность" FOREIGN KEY (id_malfunction)
    REFERENCES malfunction.malfunctions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.support_developer_answers
    ADD CONSTRAINT "Вопрос техподдержки" FOREIGN KEY (id_question)
    REFERENCES malfunction.support_developer_questions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.support_developer_answers
    ADD CONSTRAINT "Пользователь" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.support_developer_questions
    ADD CONSTRAINT "Неисправность" FOREIGN KEY (id_malfunction)
    REFERENCES malfunction.malfunctions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS malfunction.support_developer_questions
    ADD CONSTRAINT "Пользователь (специалист техподде" FOREIGN KEY (id_user)
    REFERENCES malfunction.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;
CREATESQL;
  }

}
